TEST CASES:

--------------------------------------------------------------------------------------------------
Creation of a 0-signature with 11 0-cells and then creating diagrams of each of them - basis for creating more complicated diagrams

            var zeroSig = new Signature(null);
            
            var zeroGenerator = new Generator("A");
            zeroSig.growSignature(zeroGenerator);
            
            zeroGenerator = new Generator("B");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("C");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("D");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("E");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("F");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("G");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("H");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("I");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("J");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("K");
            zeroSig.growSignature(zeroGenerator);

            var diagA = zeroSig.createMapDiagram("A");
            var diagB = zeroSig.createMapDiagram("B");
            var diagC = zeroSig.createMapDiagram("C");
            var diagD = zeroSig.createMapDiagram("D");
            var diagE = zeroSig.createMapDiagram("E");
            var diagF = zeroSig.createMapDiagram("F");
            var diagG = zeroSig.createMapDiagram("G");
            var diagH = zeroSig.createMapDiagram("H");
            var diagI = zeroSig.createMapDiagram("I");
            var diagJ = zeroSig.createMapDiagram("J");
            var diagK = zeroSig.createMapDiagram("K");
--------------------------------------------------------------------------------------------------
Creating a 2-cell with one incoming edge and one outgoing edge

            var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("beta", diagA, diagB);
            sig.growSignature(oneGenerator);

            var diagAlfa = sig.createMapDiagram("alfa");
            var diagBeta = sig.createMapDiagram("beta");

            var TwoGenerator = new Generator("omega", diagAlfa, diagBeta);

            sig = new Signature(sig);
            sig.growSignature(TwoGenerator);

            var diag = sig.createMapDiagram("omega");
            diag.diagram.print2D(diag.map);
            
--------------------------------------------------------------------------------------------------           
Creating a 2-cell with 2 incoming edges and three outgoing edges

            var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("beta", diagB, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("gamma", diagC, diagD);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("delta", diagA, diagH);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("eta", diagH, diagD);
            sig.growSignature(oneGenerator);

            var diagAlfa = sig.createMapDiagram("alfa");
            var diagBeta = sig.createMapDiagram("beta");
            var diagGamma = sig.createMapDiagram("gamma");
            var diagDelta = sig.createMapDiagram("delta");
            var diagEta = sig.createMapDiagram("eta");

            diagAlfa = diagAlfa.attachWrapped(diagBeta, ['t']);
            diagAlfa = diagAlfa.attachWrapped(diagGamma, ['t']);
            diagDelta = diagDelta.attachWrapped(diagEta, ['t']);

            var TwoGenerator = new Generator("omega", diagAlfa, diagDelta);

            sig = new Signature(sig);
            sig.growSignature(TwoGenerator);

            var diag = sig.createMapDiagram("omega");
            diag.diagram.print2D(diag.map);

            
--------------------------------------------------------------------------------------------------
Creates two 2-cells each with one incoming and outgoing edge, then 1-composes them

                       var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("beta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("gamma", diagB, diagD);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("delta", diagB, diagD);
            sig.growSignature(oneGenerator);

            var diagAlfa = sig.createMapDiagram("alfa");
            var diagBeta = sig.createMapDiagram("beta");
            var diagGamma = sig.createMapDiagram("gamma");
            var diagDelta = sig.createMapDiagram("delta");

            sig = new Signature(sig);

            var twoGenerator = new Generator("omega", diagAlfa, diagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("omikron", diagGamma, diagDelta);
            sig.growSignature(twoGenerator);

            var diag = sig.createMapDiagram("omega");
            var diagPrime = sig.createMapDiagram("omikron");

            diag = diag.attachWrapped(diagPrime, ['t', 't']);
            console.log(diag);
            diag.diagram.print2D(diag.map);
            
--------------------------------------------------------------------------------------------------
Creates two 2-cells each with one incoming and outgoing edge, then 2-composes them

            
            var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("beta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("gamma", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("delta", diagA, diagB);
            sig.growSignature(oneGenerator);

            var diagAlfa = sig.createMapDiagram("alfa");
            var diagBeta = sig.createMapDiagram("beta");
            var diagGamma = sig.createMapDiagram("gamma");
            var diagDelta = sig.createMapDiagram("delta");

            sig = new Signature(sig);

            var twoGenerator = new Generator("omega", diagAlfa, diagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("omikron", diagGamma, diagDelta);
            sig.growSignature(twoGenerator);

            var diag = sig.createMapDiagram("omega");
            var diagPrime = sig.createMapDiagram("omikron");

            diag = diag.attachWrapped(diagPrime, ['t']);
            console.log(diag);
            diag.diagram.print2D(diag.map);
            
--------------------------------------------------------------------------------------------------

Composition of a 2-diagram and a 1-diagram boosted up to identity

                        var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("beta", diagA, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("gamma", diagA, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("delta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("eta", diagC, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("epsilon", diagC, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("kappa", diagB, diagE);
            sig.growSignature(oneGenerator);

            var diagAlfa = sig.createMapDiagram("alfa");
            var diagBeta = sig.createMapDiagram("beta");
            var diagGamma = sig.createMapDiagram("gamma");
            var diagDelta = sig.createMapDiagram("delta");
            var diagEta = sig.createMapDiagram("eta");
            var diagEpsilon = sig.createMapDiagram("epsilon");

            diagBeta = diagBeta.attachWrapped(diagEta, ['t']);
            diagGamma = diagGamma.attachWrapped(diagEpsilon, ['t']);


            sig = new Signature(sig);

            var twoGenerator = new Generator("omega", diagAlfa, diagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("omikron", diagGamma, diagDelta);
            sig.growSignature(twoGenerator);

            var diagId = sig.createMapDiagram("kappa");
            console.log(diagId);


            var diag = sig.createMapDiagram("omega");
            var diagPrime = sig.createMapDiagram("omikron");

            diag = diag.attachWrapped(diagId, ['t', 't']);

            diag.diagram.print2D(diag.map);


            
--------------------------------------------------------------------------------------------------

                         var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("beta", diagA, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("gamma", diagA, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("delta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("eta", diagC, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("epsilon", diagC, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("kappa", diagB, diagE);
            sig.growSignature(oneGenerator);

            var diagAlfa = sig.createMapDiagram("alfa");
            var diagBeta = sig.createMapDiagram("beta");
            var diagGamma = sig.createMapDiagram("gamma");
            var diagDelta = sig.createMapDiagram("delta");
            var diagEta = sig.createMapDiagram("eta");
            var diagEpsilon = sig.createMapDiagram("epsilon");
            var diagEtaPrime = sig.createMapDiagram("eta");
            var diagEpsilonPrime = sig.createMapDiagram("epsilon");
            var diagKappaPrime = sig.createMapDiagram("kappa");

            diagBeta = diagBeta.attachWrapped(diagEta, ['t']);
            diagGamma = diagGamma.attachWrapped(diagEpsilon, ['t']);


            sig = new Signature(sig);

            var twoGenerator = new Generator("omega", diagAlfa, diagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("omikron", diagGamma, diagDelta);
            sig.growSignature(twoGenerator);

            // In the current setup essential to create these diagrams here (after raising the signature level), to 
            //ensure that they are boosted up
            var diagKappa = sig.createMapDiagram("kappa");
            var diagBetaPrime = sig.createMapDiagram("beta");
            var diagOmega = sig.createMapDiagram("omega");

            diagOmega = diagOmega.attachWrapped(diagKappa, ['t', 't']);

            diagEtaPrime = diagEtaPrime.attachWrapped(diagKappaPrime, ['t']);

            twoGenerator = new Generator("iota", diagEtaPrime, diagEpsilonPrime);
            sig.growSignature(twoGenerator);

            var diagIota = sig.createMapDiagram("iota");

            diagBetaPrime = diagBetaPrime.attachWrapped(diagIota, ['t', 't']);

            diagOmega = diagOmega.attachWrapped(diagBetaPrime, ['t']);

            console.log(diagOmega);
            diagOmega.diagram.print2D(diagOmega.map);
            
            
--------------------------------------------------------------------------------------------------
Further attachment examples and basic rewriting

                        var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("beta", diagA, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("gamma", diagA, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("delta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("eta", diagC, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("epsilon", diagC, diagE);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("kappa", diagB, diagE);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("fi", diagD, diagA);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("mu", diagD, diagA);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("lambda", diagE, diagJ);
            sig.growSignature(oneGenerator);

            var diagAlfa = sig.createMapDiagram("alfa");
            var diagBeta = sig.createMapDiagram("beta");
            var diagGamma = sig.createMapDiagram("gamma");
            var diagDelta = sig.createMapDiagram("delta");
            var diagEta = sig.createMapDiagram("eta");
            var diagEtaPrime = sig.createMapDiagram("eta");
            var diagEpsilon = sig.createMapDiagram("epsilon");
            var diagEpsilonPrime = sig.createMapDiagram("epsilon");
            var diagKappaPrime = sig.createMapDiagram("kappa");
            var diagMu = sig.createMapDiagram("mu");
            var diagFiPrime = sig.createMapDiagram("fi");


            diagBeta = diagBeta.attachWrapped(diagEta, ['t']);
            diagGamma = diagGamma.attachWrapped(diagEpsilon, ['t']);


            sig = new Signature(sig);

            var twoGenerator = new Generator("omega", diagAlfa, diagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("omikron", diagGamma, diagDelta);
            sig.growSignature(twoGenerator);

            // In the current setup essential to create these diagrams here (after raising the signature level), to 
            //ensure that they are boosted up
            var diagKappa = sig.createMapDiagram("kappa");
            var diagFi = sig.createMapDiagram("fi");
            var diagLambda = sig.createMapDiagram("lambda");
            var diagBetaPrime = sig.createMapDiagram("beta");
            var diagOmega = sig.createMapDiagram("omega");

            diagOmega = diagOmega.attachWrapped(diagKappa, ['t', 't']);

            diagEtaPrime = diagEtaPrime.attachWrapped(diagKappaPrime, ['t']);

            twoGenerator = new Generator("iota", diagEtaPrime, diagEpsilonPrime);
            sig.growSignature(twoGenerator);

            var diagIota = sig.createMapDiagram("iota");

            diagIota = diagIota.attachWrapped(diagBetaPrime, ['s', 's']);

            diagOmega = diagOmega.attachWrapped(diagIota, ['t']);

            diagOmega = diagOmega.attachWrapped(diagFi, ['s', 's']);

            console.log(diagOmega);

            diagOmega = diagOmega.diagram.rewrite(diagOmega.map, diagFiPrime, diagMu);

            diagOmega = diagOmega.attachWrapped(diagLambda, ['t', 't']);

            console.log(diagOmega);

            diagOmega.diagram.print2D(diagOmega.map);
            
            ================================================
            
                         var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("1-alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-beta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-gamma", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-delta", diagA, diagB);
            sig.growSignature(oneGenerator);

            var oneDiagAlfa = sig.createMapDiagram("1-alfa");
            var oneDiagBeta = sig.createMapDiagram("1-beta");
            var oneDiagGamma = sig.createMapDiagram("1-alfa");
            var oneDiagDelta = sig.createMapDiagram("1-beta");

            sig = new Signature(sig);

            var twoGenerator = new Generator("2-omega", oneDiagAlfa, oneDiagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-theta", oneDiagGamma, oneDiagDelta);
            sig.growSignature(twoGenerator);

            var twoDiagOmega = sig.createMapDiagram("2-omega");
            var twoDiagTheta = sig.createMapDiagram("2-theta");

            sig = new Signature(sig);

            var threeGenerator = new Generator("3-iota", twoDiagOmega, twoDiagTheta);
            sig.growSignature(threeGenerator);

            var threeDiagIota = sig.createMapDiagram("3-iota");

            threeDiagIota.diagram.targetBoundary.diagram.print2D(threeDiagIota.map);

            console.log(threeDiagIota);
            
            
            =============================================
            0-composition of 3-cells
            
            var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("1-alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-beta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-gamma", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-delta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-kappa", diagB, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-epsilon", diagB, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-mu", diagB, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-fi", diagB, diagC);
            sig.growSignature(oneGenerator);

            var oneDiagAlfa = sig.createMapDiagram("1-alfa");
            var oneDiagBeta = sig.createMapDiagram("1-beta");
            var oneDiagGamma = sig.createMapDiagram("1-gamma");
            var oneDiagDelta = sig.createMapDiagram("1-delta");

            var oneDiagKappa = sig.createMapDiagram("1-kappa");
            var oneDiagEpsilon = sig.createMapDiagram("1-epsilon");
            var oneDiagMu = sig.createMapDiagram("1-mu");
            var oneDiagFi = sig.createMapDiagram("1-fi");

            sig = new Signature(sig);

            var twoGenerator = new Generator("2-omega", oneDiagAlfa, oneDiagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-theta", oneDiagGamma, oneDiagDelta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-lambda", oneDiagKappa, oneDiagEpsilon);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-ro", oneDiagMu, oneDiagFi);
            sig.growSignature(twoGenerator);

            var twoDiagOmega = sig.createMapDiagram("2-omega");
            var twoDiagTheta = sig.createMapDiagram("2-theta");

            var twoDiagLambda = sig.createMapDiagram("2-lambda");
            var twoDiagRo = sig.createMapDiagram("2-ro");

            sig = new Signature(sig);

            var threeGenerator = new Generator("3-iota", twoDiagOmega, twoDiagTheta);
            sig.growSignature(threeGenerator);

            var threeGenerator = new Generator("3-omikron", twoDiagLambda, twoDiagRo);
            sig.growSignature(threeGenerator);

            var threeDiagIota = sig.createMapDiagram("3-iota");
            var threeDiagOmikron = sig.createMapDiagram("3-omikron");

            console.log(threeDiagIota);
            console.log(threeDiagOmikron);

            threeDiagIota = threeDiagIota.attachWrapped(threeDiagOmikron, ['t', 't', 't']);

            console.log(threeDiagIota);


            threeDiagIota.diagram.targetBoundary.diagram.print2D(threeDiagIota.diagram.targetBoundary.map);

            threeDiagIota.diagram.print3D(threeDiagIota.map);
            
            =====================
            
                                    var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("1-alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-beta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-gamma", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-delta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-kappa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-epsilon", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-mu", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-fi", diagA, diagB);
            sig.growSignature(oneGenerator);

            var oneDiagAlfa = sig.createMapDiagram("1-alfa");
            var oneDiagBeta = sig.createMapDiagram("1-beta");
            var oneDiagGamma = sig.createMapDiagram("1-gamma");
            var oneDiagDelta = sig.createMapDiagram("1-delta");

            var oneDiagKappa = sig.createMapDiagram("1-kappa");
            var oneDiagEpsilon = sig.createMapDiagram("1-epsilon");
            var oneDiagMu = sig.createMapDiagram("1-mu");
            var oneDiagFi = sig.createMapDiagram("1-fi");

            sig = new Signature(sig);

            var twoGenerator = new Generator("2-omega", oneDiagAlfa, oneDiagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-theta", oneDiagGamma, oneDiagDelta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-lambda", oneDiagKappa, oneDiagEpsilon);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-ro", oneDiagMu, oneDiagFi);
            sig.growSignature(twoGenerator);

            var twoDiagOmega = sig.createMapDiagram("2-omega");
            var twoDiagTheta = sig.createMapDiagram("2-theta");

            var twoDiagLambda = sig.createMapDiagram("2-lambda");
            var twoDiagRo = sig.createMapDiagram("2-ro");

            // twoDiagTheta.print();

            sig = new Signature(sig);

            var threeGenerator = new Generator("3-iota", twoDiagOmega, twoDiagTheta);
            sig.growSignature(threeGenerator);

            var threeGenerator = new Generator("3-omikron", twoDiagLambda, twoDiagRo);
            sig.growSignature(threeGenerator);

            var threeDiagIota = sig.createMapDiagram("3-iota");
            var threeDiagOmikron = sig.createMapDiagram("3-omikron");

            console.log(threeDiagIota);
            console.log(threeDiagOmikron);

            threeDiagIota = threeDiagIota.attachWrapped(threeDiagOmikron, ['t', 't']);

            console.log(threeDiagIota);


            threeDiagIota.diagram.sourceBoundary.diagram.print2D(threeDiagIota.diagram.sourceBoundary.map);
            
            
            
            ===================
            
                       var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("alfa", diagA, diagF);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("beta", diagA, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("gamma", diagA, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("delta", diagC, diagF);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("eta", diagC, diagF);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("epsilon", diagC, diagE);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("kappa", diagF, diagE);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("zeta", diagF, diagE);
            sig.growSignature(oneGenerator);

            var diagAlfa = sig.createMapDiagram("alfa");
            var diagBeta = sig.createMapDiagram("beta");
            var diagDelta = sig.createMapDiagram("delta");
            var diagEta = sig.createMapDiagram("eta");
            var diagEpsilon = sig.createMapDiagram("epsilon");
            var diagZeta = sig.createMapDiagram("zeta");

            diagBeta = diagBeta.attachWrapped(diagEta, ['t']);
            diagDelta = diagDelta.attachWrapped(diagZeta, ['t']);

            sig = new Signature(sig);

            var twoGenerator = new Generator("omega", diagAlfa, diagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("iota", diagDelta, diagEpsilon);
            sig.growSignature(twoGenerator);

            // In the current setup essential to create these diagrams here (after raising the signature level), to 
            //ensure that they are boosted up

            var diagGamma = sig.createMapDiagram("gamma");
            var diagKappa = sig.createMapDiagram("kappa");
            var diagOmega = sig.createMapDiagram("omega");
            var diagIota = sig.createMapDiagram("iota");

            diagOmega = diagOmega.attachWrapped(diagKappa, ['t', 't']);

            diagGamma = diagGamma.attachWrapped(diagIota, ['t', 't']);

            diagOmega = diagOmega.attachWrapped(diagGamma, ['t']);

            console.log(diagOmega);
            diagOmega.diagram.print2D(diagOmega.map);

            
            
            ==========================
            
            THIS IS PROJECT TESTING
            
            
                    function union(a, b) {
            return $.extend({}, a, b);
        }

        function test() {

            var zeroSig = new Signature(null);

            var zeroGenerator = new Generator("A");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("B");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("C");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("D");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("E");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("F");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("G");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("H");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("I");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("J");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("K");
            zeroSig.growSignature(zeroGenerator);

            var diagA = zeroSig.createMapDiagram("A");
            var diagB = zeroSig.createMapDiagram("B");
            var diagC = zeroSig.createMapDiagram("C");
            var diagD = zeroSig.createMapDiagram("D");
            var diagE = zeroSig.createMapDiagram("E");
            var diagF = zeroSig.createMapDiagram("F");
            var diagG = zeroSig.createMapDiagram("G");
            var diagH = zeroSig.createMapDiagram("H");
            var diagI = zeroSig.createMapDiagram("I");
            var diagJ = zeroSig.createMapDiagram("J");
            var diagK = zeroSig.createMapDiagram("K");

            /*---------------------------------------------- 0-cell diagrams created ----------------------------------------------*/

            /*---------------------------------------------- Insert test cases here ----------------------------------------------*/

            var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("1-alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-beta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-gamma", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-delta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-kappa", diagB, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-epsilon", diagB, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-mu", diagB, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-fi", diagB, diagC);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-zeta", diagC, diagD);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-eta", diagC, diagD);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-nu", diagC, diagD);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-xi", diagC, diagD);
            sig.growSignature(oneGenerator);


            var oneDiagAlfa = sig.createMapDiagram("1-alfa");
            var oneDiagBeta = sig.createMapDiagram("1-beta");
            var oneDiagGamma = sig.createMapDiagram("1-gamma");
            var oneDiagDelta = sig.createMapDiagram("1-delta");

            var oneDiagKappa = sig.createMapDiagram("1-kappa");
            var oneDiagEpsilon = sig.createMapDiagram("1-epsilon");
            var oneDiagMu = sig.createMapDiagram("1-mu");
            var oneDiagFi = sig.createMapDiagram("1-fi");

            var oneDiagZeta = sig.createMapDiagram("1-zeta");
            var oneDiagEta = sig.createMapDiagram("1-eta");
            var oneDiagNu = sig.createMapDiagram("1-nu");
            var oneDiagXi = sig.createMapDiagram("1-xi");


            sig = new Signature(sig);

            var twoGenerator = new Generator("2-omega", oneDiagAlfa, oneDiagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-theta", oneDiagGamma, oneDiagDelta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-lambda", oneDiagKappa, oneDiagEpsilon);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-ro", oneDiagMu, oneDiagFi);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-tau", oneDiagZeta, oneDiagEta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-chi", oneDiagNu, oneDiagXi);
            sig.growSignature(twoGenerator);

            var twoDiagOmega = sig.createMapDiagram("2-omega");
            var twoDiagTheta = sig.createMapDiagram("2-theta");

            var twoDiagLambda = sig.createMapDiagram("2-lambda");
            var twoDiagRo = sig.createMapDiagram("2-ro");

            var twoDiagTau = sig.createMapDiagram("2-tau");
            var twoDiagChi = sig.createMapDiagram("2-chi");

            sig = new Signature(sig);

            var threeGenerator = new Generator("3-iota", twoDiagOmega, twoDiagTheta);
            sig.growSignature(threeGenerator);

            var threeGenerator = new Generator("3-omikron", twoDiagLambda, twoDiagRo);
            sig.growSignature(threeGenerator);

            var threeGenerator = new Generator("3-pi", twoDiagTau, twoDiagChi);
            sig.growSignature(threeGenerator);

            var threeDiagIota = sig.createMapDiagram("3-iota");
            var threeDiagOmikron = sig.createMapDiagram("3-omikron");
            var threeDiagPi = sig.createMapDiagram("3-pi");

            console.log(threeDiagIota);
            console.log(threeDiagOmikron);
            console.log(threeDiagPi);

            threeDiagIota = threeDiagIota.attachWrapped(threeDiagOmikron, ['t', 't', 't']);
            threeDiagIota = threeDiagIota.attachWrapped(threeDiagPi, ['t', 't', 't']);

            console.log(threeDiagIota);

            threeDiagIota.diagram.targetBoundary.diagram.print2D(threeDiagIota.diagram.targetBoundary.map);

            threeDiagIota.diagram.print3D(threeDiagIota.map);

            console.log(threeDiagIota.enumerate(threeDiagOmikron, true));

            var project = new Project("");
            project.mapDiagram = twoDiagOmega;
            project.signature = sig;

            var data = new Hashtable();

            var varSig = project.signature;
            while (varSig != null) {
                varSig.nCells.each(function (key, value) {
                    var tempData = new Data(key, '#222222', varSig.n);
                    data.put(key, tempData);
                });
                varSig = varSig.sigma;
            }

            project.dataList = data;

            var string = globular_stringify(project);
            console.log(string);
            var testProject = new Project(string);
            console.log(testProject);

            var testGenerator = new Generator();
            console.log(testGenerator);
            
            ===========================>>>>>>>>>>>>>>>
            
                        var zeroSig = new Signature(null);

            var zeroGenerator = new Generator("A");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("B");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("C");
            zeroSig.growSignature(zeroGenerator);

            zeroGenerator = new Generator("D");
            zeroSig.growSignature(zeroGenerator);

            var diagA = zeroSig.createMapDiagram("A");
            var diagB = zeroSig.createMapDiagram("B");
            var diagC = zeroSig.createMapDiagram("C");
            var diagD = zeroSig.createMapDiagram("D");

            /*---------------------------------------------- 0-cell diagrams created ----------------------------------------------*/

            /*---------------------------------------------- Insert test cases here ----------------------------------------------*/

            var sig = new Signature(zeroSig);

            var oneGenerator = new Generator("1-alfa", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-beta", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-gamma", diagA, diagB);
            sig.growSignature(oneGenerator);

            oneGenerator = new Generator("1-delta", diagA, diagB);
            sig.growSignature(oneGenerator);


            var oneDiagAlfa = sig.createMapDiagram("1-alfa");
            var oneDiagBeta = sig.createMapDiagram("1-beta");
            var oneDiagGamma = sig.createMapDiagram("1-gamma");
            var oneDiagDelta = sig.createMapDiagram("1-delta");


            sig = new Signature(sig);

            var twoGenerator = new Generator("2-omega", oneDiagAlfa, oneDiagBeta);
            sig.growSignature(twoGenerator);

            twoGenerator = new Generator("2-theta", oneDiagGamma, oneDiagDelta);
            sig.growSignature(twoGenerator);

            var twoDiagOmega = sig.createMapDiagram("2-omega");
            var twoDiagTheta = sig.createMapDiagram("2-theta");


            var project = new Project("");
            project.mapDiagram = twoDiagOmega;
            project.signature = sig;

            var data = new Hashtable();

            var varSig = project.signature;
            while (varSig != null) {
                varSig.nCells.each(function (key, value) {
                    var tempData = new Data(key, '#222222', project.signature.createMapDiagram(key), varSig.n);
                    data.put(key, tempData);
                }.bind(this));
                varSig = varSig.sigma;
            }

            project.dataList = data;

            var string = globular_stringify(project);
            console.log(string);
            var testProject = new Project(string);
            console.log(testProject);

            var testGenerator = new Generator();
            console.log(testGenerator);
            
Ongoing issues:

(4) Matching needs to have safeguards for when two diagrams are not the same, it will allow to use this method as 'diagram isomorphism' check, which in turn can 
be used if we ever wanted to perform 'signature isomorphism' or union of two signatures. Signature isomorphism could be done by creating diagrams of each 
generator and then matching or matching sources and targets of generators
        
(11) [THINK MORE] Think about what happens in partial order updates when there is no predecessor or successor for a set of k-cells, for now 'null detection' clauses 
are inserted, than ensure that nothing breaks in such cases, reconsider whether this is sufficient. [Partially SOLVED] For the most part, attachment is now used
to perform rewriting. It is very likely that the convention of ordering n-cells and matching ensures that this is not a problem

(12) [THINK MORE] 0-cells in partial order updates in the rewriting procedure - make the structure more elegant as currently both partial orders, as well as diagram 
signatures are updated at the same time, which creates the need to exclude 0-cells using 'if statements'. This is still to be cleaned up.

(16) Testbed - Automated framework for testing -- [OBSERVATION] This might be unnecessary as we introduce the GUI

(17) Interactive Graphical User Interface using d3

(19) [THINK MORE] Interchangers implemented in a systematic way

(22) 3D rendering algorithm through creation of block-diagrams with sharp edges and then smoothing them over -- All the necessary data is now precomputed, 
what remains to be done is actual 3D graphics rendering (best to implement that together with d3) [partially COMPLETED] - sharp edges generated,
more work needs to be done to properly render 2D surfaces

(29) [THINK MORE] Rewriting an n-diagram in such a way that the highest level cell that appears in the source of the rewrite is k <= n-1.
This is equivalent to considering what happens when we want to attach. Appears it is sufficient to just boost up the the subdiagram 
to be of level n-1.


(!30) In the enumeration procedure XXX

-------------- 12/5/2015 --------------

(32) [DECISION NEEDED] Refactoring the attachment procedure. Currently we supply a subdiagram of the boundary of the diagram to which we will be attaching and then
we compute a bijection between that and the source of the attached generator. However an inclusion of the source of the attached generator into the
boundary of the diagram we are attaching to is already provided by the matching procedure.
Suggested solution: Attach to take as input: instead of a boundary subdiagram, an inclusion of the source of the attached diagram.
This is also fine for the recursive calls, as the inclusion could be extended back to deeper boundaries of the attached generator

(!39) Scalar enumeration

[OBSERVATIONS]

- We fail because the embedding procedure for partial orders fails when a k-cell is not identified with something that already is in the partial order
- We can generate additional matches once we use the current enumerate procedure. The position in the partial order is secondary if all the types match
- The specific subdiagram gets uniquely determined by the predecessor-successor pair in the respective partial orders
- To an extent we were able to compute this before - we did this via identification (bijection procedure), so the implicit assumption was that
we always identify at least one cell at every level - which is clearly not true (example: scalars)

[QUESTIONS]

- Do we have to separately examine every segment marked by partial order pairs? It seems that this is unnecessary
- Is it ever the case that we could rewrite one part of a region that is elsewhere in the partial order than another part of the region which cannot be rewritten?
- Maybe enriching the MapDiagram structure is unnecessary - a click would give us the partial order info we need (it must give it to us anyway
even if the structure is enriched). This then gets passed as an argument to the 'attach' procedure, which augments partial orders appropriately
- How would this work in higher dimensions?

Augment the enumeration procedure. Pseudocode:

Enumerate(mapDiagram, matchedMapDiagram) // We assume both are of the same degree
{
if mapDiagram is a 0-MapDiagram {
    return match if the types of the 0-cells in mapDiagram and the 0-cell in matchedMapDiagram match
    }
else {
    determine total orders on n-cells in mapDiagram and matchedMapDiagram
    loop N-K times { where N is the number of n-cells in mapDiagram and K the number of n-cells in matchedMapDiagram
    recursively call the enumeration procedure on an intermediate boundary (the base platform for each attempted match)
    set the initial intermediate boundary to be the source boundary of this mapDiagram
    
    perform checks to ensure that matches found at a deeper level are valid and extend to this level
    
    rewrite the intermediate boundary using the i-th cell in the total order on n-cells in mapDiagram
    }
}
    
}

Problems with one inclusion function generating multiple matches only arise when there is a gap between highest order cell in the matched
mapDiagram and the highest order cell in this mapDiagram (although both mapDiagrams have to be of the same degree)

We could detect the multiple lower-order matches at the stage when we complete the current match by elements that are matched
within the boundary. We need to iterate over them in the order of the total order on n-cells to segment the element

Each match of a matched diagram with a k-cell as the highest order cell in a diagram with an n-cell as the highest order cell
must come with n-k pairs of elements that will tell us how to fit the target of the rewrite in partial orders in the rewritten diagram.
This data is inherently tied to the sourc-target structure of cells in the diagram.

Actually each time a recursive enumerate call is performed, it is done for a particular 'interval' in the total order.
This pair of successive elements in the total order constitutes exactly the identification of matched subdiagram along this partucular axis.
Then, all there needs to be done is to lift the names of such pairs at lower levels.

This is not more expensive computationally, as we already are finding these matches, but we end up distregarding them as we return
to higher levels of recursion.

Each match comes with an additional array of n-k pairs.

Get a separate datatype for match. hashtable and array paired.

Algorithm:

When there is no total order on highest order level cells, then add a pair identifying position in the total order on elements in this
mapDiagram to the identification arrays carried by each match. 


-------------- 5/6/2015 --------------

(40) [ALIGN] Given a matched diagram, a diagram and a match, generate a picture of the diagram with the elements included in the match highlighted.
For 2-diagrams this can be done mostly in the rendering function. On the basis of rendering data we know which elements belong to either
the source or the target boundary (or both for n-1 cells). We need to make sure that the inclusion function on source/target diagrams
is lifted (composed with the source/target inclusion map) so that the co-domain is the namespace of the main diagram.

The rendering function must take an additional array as an argument. The elements in the array are to be in one of the boundaries 
and they should be highlighted by the rendering function. In particular the array might be empty (default behaviour when no argument is passed)
Also, we need info which boundary it is (boolean a in {'s', 't'})

(41) [ALIGN] A function to automatically compose maps in MapDiagrams. An example application is in map composition in (40)

(42) [THINK MORE] Introduction of k-cells into partial orders on (k-i)-cells. This is to pinpoint the location of scalars. After initial consideration,
it seems that this will not force significant modifications to how partial orders are updated.

This creates a problem, as now the total order on n-k cells would also include all n-i cells for i<k. We need to perform
additional checks in extracting the total order to exclude these.


==============================================================
15th June 2015

Monoidal category rewriting

(1) [KB] 3-cell attachment (fall back to 3-cell rewriting, first step: fresh renaming of mapdiagrams and their boundaries)

DONE (2) [JV] Enumerate has to correctly specify the exact location of the match in all partial order 
(pair of names in the overall diagram for each dimension). This won't be valid for higher dimensions,
so we'll have to think about something cleverer when we get to that stage.

(3) [KB] Use data computed in (2) in attachment
    (a) Partial order on k-cells to also include k+1, k+2, ..., n-cells (cells of at least dimension k, as opposed to just of dimension k)

(4) [JV] Use data computed in (3) in rendering

(5) Interchangers. Idea: detect clicks on 2-cells in a diagram. If they are adjacent in height, and otherwise able to be interchanged,
perform the rewrite of the 2-diagram.

==============================================================
19th June 2015

(1) Minimal generating adjacency list for a given partial order 
    (a) E-mail
    (b) Example
    
SOLUTION: Change the way in which total orders are computed: calculate the transitive closure then see whether
there is an element which is related to all others
Alternative: We hold transitive closures as opposed to current generating adjacency lists. The drawback is that in general we hold more data
    
(2) Check whether a source and a target match are the same - remove duplicates

SOLUTION: This should be an easy test conducted when source and target matches are merged in selectGenerator in Project.js

(3) 3-cells involving a 2-cell empty region

This has to do with the way we find n-cell bijections

(4) Rewriting

    (a) When we delete elements and there will be no elements of the same level inserted into the diagram - how do we restore partial orders?



==============================================================

Pseudocode and descriptions of the major procedures:

(1) Attach a diagram to the boundary of another diagram --- Attach()

(2) Find a bijection between sets of generators of two diagrams that are promised to be the same --- Match()

(3) Rewrite a diagram given its subdiagram (source of the rewrite) and the target of the rewrite --- Rewrite()

(4) Create a diagram of a single generator in a siganture --- Create()

(5) Embed a partial order in another partial order --- Embed()

(6) Lays out the diagram (assigns n coordinates to each k-cell in an n-diagram), for now only for 1- and 2-diagrams --- 2D Layout()

(7) Creates a subdiagram of this diagram --- Subdiagram()

(8) Enumerate - 

==============================================================
(1) Attach

Attach (d:Diag(n,t), g:Diag(n,t), d':Diag(x,d), u, r)
{
// d: diagram we're attaching to
// g: diagram we are attaching to d
// d': subdiagram of d along which we're attaching
// u: are we attaching g to the source or to the target boundary of d (boolean) 
// r: flag whether to recurse further into the target boundary or not (boolean), used for efficiency reasons

//Find a match between d' and an appropriate subboundary of g
L = Match(g.D(n-x, ~u), LIFT(d’)) // returns a list of pairs of generators (one from g.D(~u), the other of d’)

// n-x tells us what is the level of the boundary of g that we're attaching along, we take ¬u, as if we're attaching to the source (target) boundary of d, we need to take the target (source) boundary of g
L’ <- lift L to be a correspondence between elements of g and of d (using inclusion of d’ in d and boundary of g in g)

For each element of G
{
    If contained in L'
        Rename
    else
        Ensure fresh wrt D
}
Update D by taking union(D, G)


// Update partial orders given on generators of d
Let k vary between 0 and n
For each k, update the partial order on k-cells of d
{
    if (k >= x+1)
    { // Attaching to the source boundary, similarly for the target boundary of this
    
        Check if there are any k-cells in the kth target (source) boundary of the attached diagram, or in the source (target) boundary of this diagram
        {
            If not, for k=n, append the total order on the n-cells in the attached diagram, to the total order on n-cells in this diagram
            For other k, take a union of partial orders (there will be disjoint components)
        } 

        // We adapt a convention that if we're attaching to the source boundary of d, then we append the partial order on k-cells in g at the bottom of the PO on           k-cells in d, for attaching to the target bounadry we append the PO in g at the top of PO in d

        /*
        For k = n, the partial order on n-cells is a total order, every time slice creates a connection between two successive n-cells in the partial order
        hence, we simply append the total order on k-cells in the attached diagram to the total order in the original diagram; also, no n-cells are in 
        the boundary of the attached diagram
        */
        
        Else // there are k-cells in the boundary of the attached diagram
        { 
            Take the terminal (initial) element in the partial order on the target k-th boundary of the attached diagram
            and make it a predecessor (successor) of all initial elements in the partial order on k-cells in this diagram
            
            Similarly take the initial (terminal) element in the partial order on the source k-th boundary of this diagram and make it 
            a successor (predecessors) of all terminal elements in the partial order on k-cells in the attached diagram
            
            // This step is necessary to ensure we are adhering to the convention with attaching to partial orders
        }
        
    }

    // This is a bit like a rewrite on the boundary
    else // (k < x+1)
    {
        // We need to embed the partial order on k-cells in g into the partial order on k-cells in d, we use the following procedure:
        
        Find k-cells that appear in d' (on the boundary of d) in the partial order on k-cells in d, let us refer to this set as S
        
        Let Succ(S), be the successors of elements of S in the partial order on k-cells, such that they are outside of S
        Similarly for Pred(S) and predecessors
        
        Make all terminal elements of the partial order on k-cells in g predecessors of the element in Succ(S) (force this to be a single elemement) 
        in the partial order on k-cells in d
        
        Similarly for initial elements of the partial order on k-cells in g, make them successors of all elements in Pred(S) 
        in the partial order on k-cells in d

    }
}

if(n == x+1) //Condition to break recursion
    {
        Rewrite(d, d’, g.D(u)) //if we’re attaching to the source (target) of d, then we rewrite d’ to the source (target) of g
        // We’re promised there is a match between d’ and the target (source of g)
    }
else //we’re still rewriting higher order boundaries
    {
        //Discuss how to use the flag 'r'
        if r
        {
            Attach ( d.Ds, g.Ds, d’, u, true)
            Attach ( d.Dt, g.Dt, d’, u, false)
        }
    }
}

==============================================================
(2) Match

Match(d: Diag(n, t), d': Diag(n, t)) {
// d and d' are promised to be the same

Take the total order on n-Cells in d and the total order on n-Cells in d'

Pair up the corresponding elements in the bijection

If there is an underlying signature of a lower leve (i.e. d and d' are not 0-diagrams)
    {
        Recursively call the procedure for the source and the target of each n-Cell in the order given by the total order
        
        For each two elements (one from d the other from d') paired up in the bijection 'chase' their names, i.e. find out what are their names in d and d' 
        respectively, using the previously calculated subdiagram bijection and the typing function of each subdiagram (which tells us in what way is a subdiagram         embedded in the original diagram) 
    }

}


==============================================================
(3) Rewrite

Rewrite (d:Diag(n,t), d’:Diag(n,d), d'’:Diag(x,t))
{
// d: diagram we're rewriting
// d': source of the rewrite, subdiagram of d
// d'': target of the rewrite, what we're rewriting to
// sources and targets of d' and d'' promised to match

L=Match(d'.Dt, d''.Dt) u Match(d'.Ds, d''.Ds)

L'' <- lift the correspondence betwen source and target elements of d' and d'' to be a correspondence between elements of d' and d'', use embedding of boundaries

For each generator of d:
{
    If it appears in d'
    {
        If it appears in d'.Dt or d'.Ds
        Do nothing
    }
    else  \\ Appears in the INTERIOR of d' only
    {
        Remove from d
    }
}

For each generator of d'':
    If a generator is not in L''  give it a fresh name and add to d


// Update boundaries
/*
Boundary is also rewritten, a diagram is not attached to the boundary, therefore breaking the vicious cycle
*/

Look at source of the source of the rewrite

Need an embedding of the source of the source of the rewrite in the source boundary of the diagram

For each element, chase the name in the overall diagram, then see whose name it is in the source boundary and rewire the typing function.

Do the same for the target boundary

Rewrite a subdiagram of the source (target) boundary to the source (target) boundary of the rewrite target



Update partial orders given on generators of d
     {
     Let k vary between 0 and n
     For each k, update the partial order on k-cells of d
     { 
        Actually, no need to use embeddings. Instead:
             
        Remove the interior of the source of the rewrite from the partial order (could be done simultanously with removing elements from the diagram)
             
        Rename elements in the partial order on the target of the rewrite using both computed bijections
             
        // Potential step with chasing names in the overall diagram
                     
        Take predecessors of all initial elements of the partial order on elements of the interior of the source of the rewrite (call it set Pred)
        // By convention ensure that there is only one element in the set Pred
        
        In the modified partial order - make the single element in Pred, a predecessor 
        of all initial elements in the partial order on the interior of the target of the rewrite
        
        // Elements in the source and target boundary of the target of the rewrite are already embedded in the partial order at the right places due to
        // the bijection that we computed and globularity
        
        Similarly for successors of all terminal elements in the interior of the source of the rewrite
        
        /* 
        Things break down if we make all initial elements of the partial order on elements of the interior of the source of the rewrite
        successors of all elements in the set Pred
        
        Maybe require that by convention there is always just one element in the set Pred, same for the set Succ - then this is similar to updating 
        partial orders in the procedure Attach()
        */
     }
}


==============================================================
(4) Create

Create (g: Gen(n, t)){
// A generator consists of a name, a source diagram and a target diagram, let g.s and g.t be of degree (n-1), then we say g is of degree n
// We already have the source and the target diagrams of g, we use the union procedure modulo globularity conditions and then add the original generator

Deal with the case of creating a diagram of a 0-cell separately, let the typing function be identity on the diagram signature;

Compute the following bijections and put them in one renaming array:
Match(g.s.sourceBoundary, g.t.sourceBoundary)
Match(g.s.targetBoundary, g.t.targetBoundary)

Create a new diagram signature dSig
Add to it all elements of the diagram signature of g.s
Use the renaming array, to rename elements of d' and 

Take a union of dSig and the diagram signature of g.t (add those elements of g.t that do not appear in dSig)

Raise dSig one level higher

Add g to dSig

Let typingSignature be this

Let typing functions be a union of typing functions on g.s and g.t plus an idedtity on g

Let target boundary be g.t and source boundary be g.s

Let partial order on k-cells (for each k) be a union of partial orders on g.s and g.t and a total order on one object g (n-cell)

These are sufficient to create a new diagram

}

==============================================================
Partial order combination pseudocode

(5) Embed

Embed (P: partial order on k-cells in, P': partial order on k-cells, S: set of k-cells)
//S is promised to be in given a partial order by P
{
    Calculate Succ(S) and Pred(S) in P  //such elements of these sets are outside of S
    For each initial element of P'
    {
        In P, make it a successor of every element in Pred(S)
    }

    For each terminal element of P'
    {
        In P, make it a predecessor of every element in Pred(S)
    }

    Remove all elements of S from P
}


==============================================================
Layout pseudocode

(6) 2D Layout

2DLayout(d: Diagram)
{
For each 1-cell, calculate the length of the longest path from each initial element to this 1-cell in the partial order
Take the maximum of these values - this becomes the x-coordinate of a 1-cell

For 2-cells, the y-coordinate is given by the total order, also each 2-cell lends its y-coordinate to eqach 1-cell in its target (source) 
as a start (end) y-coordinate

Finally the start (end) x-coordinate of each 2-cell is the minimum (maximum) of x-coordinates of all 1-cells in its source and target combined

}


==============================================================
(7) Creating a subdiagram to be used by the Attachement procedure


Subdiagram(d: Diagram, d': subdiagram of d, g: generator of d)
{
/* 
We expand a subdiagram of d one generator at a time. From the UI point of view, firstly the user clicks and selects a boundary to which he wants to attach
another diagram. Then he proceeds to select further k-cells on the same boundary. As he selects each k-cell, if it is adjacent in the partial order
to a k-cell that already has been added to the subdiagram, then we proceed normally. If not, then we first need to add all the intermediate k-cells in the partial order

[To be resolved] What if the user selects a k-boundary, by selecting a (k-i)-cell?

*/

d is the diagram whose subdiagram we are creating
d' is the subdiagram already created by earlier selections
g is the generator currently being added

With g, we do not know in what way it should be added to d'. To avoid the necessity of again having this information being supplied by the user, we need to figure 
out how g could be composed with d'.

To do that we need for each level of the boundaries, to check whether an appropriate source (target) boundary of g matches the appropriate target (source) 
boundary of d'. It is insufficient to just use our existing procedure of for matching two isomorphic diagrams. Here we need a stronger notion, namely one of 
diagram identity - ie. two isomorphic diagrams, whose names match exactly. (Easy to achieve - simply check whether the name bijection computed by the matching
procedure is an idetity function on the set of names)

To be able to do that, for each pair of boundaries, we need to rename them, so that their cells bear the names they do in the original big diagram.

Once a match (diagram identity) is found, we have figured out how to compose the two diagrams. We can use the attachement procedure since now the diagram we are 
ataching along is known - it is the appropriate boundary od d' which is embedded in d' using the sequenc of inclusions.

}


==============================================================

Resolved issues:


If d‘‘ is of degree n (x==n), then it contains n-cells, ergo g has n-cells in its boundary and degree of g is at least n+1, hence it is a rewrite of d, not an 
attachement – definition of the procedure assumes deg(g)=deg(d)


Problem to solve: Given an element determine on which boundary of d it is present (has to do with input to the attachement procedure)
//code needs to be written anyway, regardless of whether d‘ is embedded in d or in a series of its boundaries to determine the initial value of u

Solution: Degree of an element gives a lower bound on the degree of the boundary

An n-generator is on the source (target) (n+1)-boundary iff it does not appear as a target (source) of an (n+1) generator. In particular for a diagram that’s 
boosted up from k to n, this means that initially for the first n-k levels the entire l-diagram (k<=l<=n) is its own boundary (only boosted up one level less)

A k-generator could be on a source (target)n-boundary (k+1<n) even though it appears as a target (source)_
To determine these boundaries one needs to consider ‚parent‘ elements of this generator and what boundaries are they on.


Problem to solve: in successive recursive calls how to keep track of what part of g attaches at each level (for d this is simple, as it is always d' equipped with 
an embedding into d)

Solution: It's always the same diagram, since d' remains the same diagram. We keep track by a single boolean source (target) flag, and the degree of the boundary 
is given by the difference between n and x.


(1) When we create a diagram of a generator, do we want its type signature to simply be sigma plus the generator itself, or do we want to limit sigma to just the 
elements that appear in the source and the target of the generator? === Resolved, we want the entire signature [3rd March]

(2) Should we force the target of a rewrite to be over the same signature as the diagram? (Currently we allow it not to be) -- [SOLVED] Now rewriting is implemented
using the attachment procedure which renders this problem moot.

(3) Need for a procedure taking a union of two signatures === Resolved, for now there is no need [3rd March]

(5) Rewriting the source and target boundaries in the rewrite procedure; SOLVED - The need for this never arises, by definition boundaries 
of the source and the target of a rewrite must match, the interior of a source of the rewrite never is a part of any source or target boundary

(6) Make all source and target boundary inclusions - identities === SOLVED - NO; Consider a 2-diagram of an epsilon in a Frobenius Algebra, then its target 
boundary is a 1-diagram with one 1-cell and the source and the target different, only the overall diagram knows that they are in fact the same diagram

(7) Creating copies - how useful/necessary that is === SOLVED, it is absolutely crucial to have separate copies of individual objects, otherwise a network of
references creates a multitude of bugs [3rd March]

(8) Mutability of diagrams - on a philosophical level, is it ok to manipulate diagram and typing signatures of an existing diagram?
    - for instance if we wanted to create an n-diagram containing just one 0-cell, how should we go about that.
        (1) 'Boosting up' the diagram once it already is created
        (2) For an n-signature, allowing to create a diagram of any k-cell for k<n // but this may end up being just the same as (1)
        
        In (2) In order to create a diagram of an appropriate level, we need to create it at the right 'time', ie. at the moment when the signature is of a 
        corresponding level
        
[SOLVED] Boost procedure implemented, almost everywhere else (apart from rewriting), we always create copies of diagrams.

(9) Partial Order updates in rewriting - for further discussion === The theoretical model with respect to this issue seems to be sound

(10) Consider what happens to the type signature when a new diagram of a generator gets created. Do we make the entire signature the new type signature, or do we 
only limit it to the elements that appear in the newly created diagram? In the latter case, we need to combine two type signatures when composing diagrams. But at 
the moment diagrams can only be composed if they are built over the same signature, so the first approach seems more sensible. === SOLVED, in favour of the first
approach, also we use references to be able to later modify the type signature [3rd March]

(13) Copying arrays and partial orders === RESOLVED, arrays get copied element by element using the .each() method, partial orders must also be copied to avoid 
creating a network of references that later is a source of bugs [3rd March]

(14) Painting 2D regions - [SOLVED] An impicit 2D grid is necessary, then for each 1x1 square we determine what 1-cell it belongs to. Now need to incorporate
this approach into the algorithm for rendering 3D diagrams

(15) Object serialization -- [SOLVED]

(18) Incremental creation of a diagram on an element-by-element basis, procedure which is necessary for interaction with the user -- [SOLVED] This is not necessary, 
instead given a diagram we calculate how it is included in an existing diagram, together this gives us the surface along which we could attach other diagrams

(20) Individual treatment of names - possibly in hexadecimal, this ties closely to safeguards in the matching procedure, which are currently not working 
-- [SOLVED] Generate names as we create cells, the user should not see them by default, but should have an option to choose their own names if they want to

(21) Wrappers and other nicer features for the non-graphical user interface -- [COMPLETED]

(23) Fix inclusion of the diagram that we are attaching along in the source/target boundary, currently because the structure is of size 2^n things go wrong for 
n=3 -- [SOLVED] Introduced the MapDiagram structure and separated inclusion maps from the main diagram structure, all procedures are rewritten accordingly

(24) Types of regions give types to higher level structures and have to match 
-- [SOLVED] We still need a unique name naming convention for each level, this is resolved by (20)

(25) In rewriting do we ever rewrite boundaries? This depends on whether we allow lower level diagrams to be sources or targets of rewrites 
[SOLVED] -- Use attachment to perform rewriting, the old 'Rewrite' procedure becomes just the base case of that

(26) When we boost a diagram up - do we want to rename all its elements according to some convention? (Currently inclusion maps of
target and source boundaries are just made to be identities) -- [SOLVED] We do not rename, inclusions are identities. 
The only convention we adapt is that within a single diagram names of cells at different levels are always different

(27) [THINK MORE] Specific procedures that are needed on the core's side to properly interface with the front end -- [COMPLETED] The interface
is summed up in a separate file 'interface.txt'

(28) Rewrite using attachment: (1) Enumerate all the matches (2) Boost up the diagram (necessary because of the current setup of the attachement
procedure) (3) If (26), then rewire inclusion maps (4) Perform the attachment of the rewrite (5) Take the target boundary to be the result of the procedure
-- [SOLVED] Yes, this is how we decide to do things

=== Front end - back end intergration issues ===

(31) [DECISION NEEDED] What to do when a generator of a level lower that the level of the signature is added. Currently not allowed. 
-- [SOLVED] Signature class recognises the level of the generator by examining the levels of the source and the target of the generator
(A dedicated method in the generator class that returns its dimension)

(35) When front-end calls the enumeration procedure, we need to somehow specify what diagram to call it on. Whether to do it for the main diagram
or one of its (deeper) boundaries. This data should be supplied to the core in a form of a string in {s, t}. The approach agreed so far was to
indicate this by clicking at different regions of the diagram, now we need to make this more concrete. -- [SOLVED] For now we only call the 
enumeration procedure on first level boundaries. The functionality to do this at deeper levels remains, but is not made use of just yet. 
The string with boundary info is of length 1 (i.e. s = {'s'} or s = {'t'})

(36) Adding rules (generators) through front end, specifically, how to handle saving a source/target and building the remaining part.
-- [SOLVED] Have explicit buttons to save the workspace diagram as either the source or the target of the intended diagram.

(37) Lifting signature through the front end. Two options, either: (a) Do it explicitly (b) Implicilty lift the signature to an appropriate level
(at most one level higher) when the generator is added -- [SOLVED] We do this implicitly as a generator of an order higher than 
the current order of the signature is added

(38) Boosting the diagram through the front end to be an identity diagram of a higher level. What should be the limitations there, this ties very 
closely with preparation to the attachment procedure -- [SOLVED] We introduce a dedicated button for the user to do this explicitly
